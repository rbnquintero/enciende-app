<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="3eb118fc-3fe4-4320-beec-0633d3395a5b" activeEnvironment="Default" name="REST" resourceRoot="" soapui-version="5.2.1" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:restMockService id="db29b03c-d983-45b9-bc09-132d0b81da30" port="8080" path="/" host="Rubens-MacBook-Pro.local" name="enciende" docroot=""><con:settings/><con:properties/><con:restMockAction name="/noticias/" method="GET" resourcePath="/noticias/" id="08ed48e0-27d6-4cca-8108-71441fa46031"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="12f41f7e-2f56-41e7-a539-a6726fa57e9f" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{"noticias":[{"idNoticia":1,"fechaNoticia":1460178000000,"noticia":"La directiva de MJ ha empezado con los preparativo del rally de este año el cual tendrá como fecha el 11 de junio","resumen":"El rally de esta año será el 11 de junio","titulo":"Ya hay fecha para el rally 2016","urlImagen":"http://i.imgur.com/i6YHiu5.png","rally":null,"galeria":null},{"idNoticia":2,"fechaNoticia":1460350800000,"noticia":"MJ juvenil está preparando una app para enciende en donde podrás encontrar noticias relacionadas con los ministerios que tenemos, además está app será utilizada durante el rally","resumen":"Se ha preparado una app para Enciende ","titulo":"App enciende","urlImagen":"http://imgur.com/zsObNlR.jpg","rally":null,"galeria":null}],"success":true}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/servicios/usuario/get/" method="GET" resourcePath="/servicios/usuario/get/CAASZCOZAZAVoPMBAOva5dSQdmnrKOrIwRBQ8neZA5LeZC8PZCbahKBmUHBZAzhD6JhAjZCx5lAZCsDZCqhDFC9HNgJMwZChF4yGZCfQc9193CuJE2k9DeposGTMbHaDUq43UMDTEi23vZCG6uXbkesJZAVOkK8hKcfi62cI5t7758UkRCCC9orFd4K200L9XlwSADgyQo5FCsA5pDv2Nm7ZC4T9IXZCsMDDGJVqBZCJkZD" id="d67b4adc-41d9-48d4-86bd-c224a0a61b70"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SCRIPT</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="de875c11-4e93-4dfb-83ab-2494b5cde7a8" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{"usuario":{"idUsuario":1,"email":"rbnquintero@gmail.com","genero":"H","nombre":"Ruben Quintero","tallaPlayera":"M","idFacebook":"1264765656870880","grupoUsuarios":[{"rol":"PARTICIPANTE","token":"123","grupo":{"idGrupo":1,"nombre":"AZULES","rally":{"idRally":1,"descripcion":"RALLY NARVARTE 2016","estatus":1,"fechaInicio":1465621200000,"nombre":"NARVARTE 2016"}}}]},"success":true}</con:responseContent></con:response><con:response name="Response 2 - error" id="047c5c3f-b339-4d82-8ede-bd4128fa3b7c" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{"errorMessage":"Usuario no encontrado","errorCode":"200","success":false}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/servicios/usuario/registrarFacebook/tokenEvento/tokenFacebook" method="GET" resourcePath="/servicios/usuario/registrarFacebook/AAA/CAASZCOZAZAVoPMBAOva5dSQdmnrKOrIwRBQ8neZA5LeZC8PZCbahKBmUHBZAzhD6JhAjZCx5lAZCsDZCqhDFC9HNgJMwZChF4yGZCfQc9193CuJE2k9DeposGTMbHaDUq43UMDTEi23vZCG6uXbkesJZAVOkK8hKcfi62cI5t7758UkRCCC9orFd4K200L9XlwSADgyQo5FCsA5pDv2Nm7ZC4T9IXZCsMDDGJVqBZCJkZD" id="ad5dabb0-88ee-4bc9-a6b2-8323b6267035"><con:settings/><con:defaultResponse xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="8a0660c0-f424-4028-ab34-69a92614757b" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{"usuario":{"idUsuario":1,"email":"rbnquintero@gmail.com","genero":"H","nombre":"Ruben Quintero","tallaPlayera":"M","idFacebook":"1264765656870880","grupoUsuarios":[{"rol":"PARTICIPANTE","token":"123","grupo":{"idGrupo":1,"nombre":"AZULES","rally":{"idRally":1,"descripcion":"RALLY NARVARTE 2016","estatus":1,"fechaInicio":1465621200000,"nombre":"NARVARTE 2016"}}}]},"success":true}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/servicios/rally/1/grupos" method="GET" resourcePath="/servicios/rally/1/grupos" id="6eda1fde-c6f5-4013-90f5-eeae3feb9801"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="418fd3a0-ac3c-46b6-95d9-fc908008a9f6" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{"success":true,"grupos":[{"idGrupo":1,"nombre":"AZULES"},{"idGrupo":2,"nombre":"ROJOS"},{"idGrupo":3,"nombre":"AMARILLOS"}]}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/servicios/rally/getAll" method="GET" resourcePath="/servicios/rally/getAll" id="0cd6f6b2-f2b7-44e7-ac7f-28371d87d7d6"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="f11bbb6d-67da-4a7f-9105-a0c86fcadf3c" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{"rallys":[{"idRally":1,"descripcion":"RALLY NARVARTE 2016","estatus":1,"fechaInicio":1465621200000,"nombre":"NARVARTE 2016"}],"success":true}</con:responseContent></con:response></con:restMockAction></con:restMockService><con:properties/><con:wssContainer/><con:oAuth2ProfileContainer/><con:sensitiveInformation/></con:soapui-project>